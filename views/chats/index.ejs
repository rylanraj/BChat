<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Chat</title>
  <style>
    body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

    #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); position: absolute; bottom: 0; }
    #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
    #input:focus { outline: none; }
  #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff;display: flex; justify-content: center; align-items: center;}

  /* Optimistic UI states */
  .pending { opacity: 0.55; position: relative; }
  .pending:after { content: '⏳'; font-size: 0.7rem; position: absolute; top: -6px; right: -6px; }
  .failed { opacity: 0.75; background: #f8d7da !important; position: relative; }
  .failed:after { content: '⚠'; font-size: 0.75rem; position: absolute; top: -6px; right: -6px; }


  </style>
</head>
<body>
<div class="user_profile_section">
  <div class="section_name">
    <h2>Chat</h2>
    <div class="inbox_display" id="display">
      <% otherUsers.forEach(user => { %>
        <div class="inbox" onclick="Inbox('<%= user.inboxID %>')">
          <div class="chat_message">

            <img src="<%= "/" + user.profilePicture %>" alt="pp" width="50" height="50" class="profile_picture">

            <div class="message_content">
              <h1><%= user.otherUserName %></h1>
              <p id="latest<%= user.inboxID %>"><%= user.lastMessage %></p>
            </div>
          </div>
        </div>
      <% }) %>


    </div>

  </div>
</div>
<div class="user_feed_section">
  <div class="section_name">
    <div class="chat-upper">
      <h2><%= otherUserName %></h2>
      <button id="closeButton">X</button>
    </div>
    <%
      function isURL(str) {
        return str.startsWith('https');
      }
      function containsLongWord(str) {
        const words = str.split(' ');
        for (let i = 0; i < words.length; i++) {
          if (words[i].length > 19) {
            return true;
          }
        }
        return false;
      }
    %>
    <div class="chat_display">
      <ul id="discussion">
        <% chatMessages.forEach(chat => { %>
          <% if (userID==chat.SenderID) { %>
            <div class="area send">
              <div class="delete">
                <a onclick="deleteMessage('<%= chat.MessageID %>')">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                    <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                  </svg>
                </a>
                <div id="popup<%= chat.MessageID %>" class="popup">
                  <div class="popup-content">
                    <p>Are you sure you want to delete this message?</p>
                    <button onclick="Delete('<%= chat.MessageID %>')">Yes</button>
                    <button onclick="Close('<%= chat.MessageID %>')">No</button>
                  </div>
                </div>
              </div>
              <div class="area send bubble">
                <% if(isURL(chat.Message)){ %>
                  <a href="<%= chat.Message %>" target="_blank">
                    <li class="url"><%= chat.Message %></li>
                  </a>
                <% } else if(containsLongWord(chat.Message)){ %>
                    <li class="longWord"><%= chat.Message %></li>
                <% } else { %>
                    <li class="individualMessage"><%= chat.Message %></li>
                <% } %>
              </div>
            </div>

          <% } else { %>
            <div class="area recep" >
              <div class="area recep bubble">
                <% if(isURL(chat.Message)){ %>
                  <a href="<%= chat.Message %>" target="_blank">
                    <li class="url"><%= chat.Message %></li>
                  </a>
                <% } else if(containsLongWord(chat.Message)){ %>
                  <li class="longWord"><%= chat.Message %></li>
                <% } else { %>
                  <li class="individualMessage"><%= chat.Message %></li>
                <% } %>
              </div>
            </div>
          <% } %>
        <% }) %>
      </ul>
    </div>

    <form id="form" action="">
      <input id="input" autocomplete="off" maxlength="500"/><button>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-right" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8"/>
        </svg>
      </button>
    </form>
  </div>
</div>
<script>
  window.onload = function() {
    // ... existing code ...

    // Scroll to the bottom of the chat
    const chatDisplay = document.querySelector('.chat_display');
    chatDisplay.scrollTop = chatDisplay.scrollHeight;
  };
  // Polling-based chat (Socket.IO removed)
  const inboxID = '<%= inboxID %>';
  const userID = '<%= userID %>';

  const form = document.getElementById('form');
  const messages = document.getElementById('discussion');
  const display = document.getElementById('display');

  function isURL(str) {
    return str.startsWith('https');
  }
  function containsLongWord(str) {
    const words = str.split(' ');
    for (let i = 0; i < words.length; i++) {
      if (words[i].length > 19) {
        return true;
      }
    }
    return false;
  }

  function deleteMessage(messageID) {
    document.getElementById('popup'+messageID).style.display = 'block';
  }
  async function Delete(messageID) {
    try {
      await fetch(`/api/chat/message/${messageID}`, { method: 'DELETE' });
      document.getElementById('popup'+messageID).style.display = 'none';
      // Force refresh
      await fetchMessages(true);
    } catch (e) { console.error('Delete failed', e); }
  }
  function Close(messageID) {
    document.getElementById('popup'+messageID).style.display = 'none';
  }
  function Inbox(otherInboxID) {
    window.location.href = '/chat/'+otherInboxID;
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (input.value) {
      const tempText = input.value; // capture text before clearing
      const tempId = 'temp-' + Date.now();
      appendOptimistic(tempId, tempText);
      const body = { message: tempText };
      input.value='';
      try {
        await fetch(`/api/chat/${inboxID}/messages`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(body)
        });
        await fetchMessages(true); // refresh to replace temp bubble
      } catch (e) {
        console.error('Send failed', e);
        markFailed(tempId);
      }
    }
  });

  let lastMessageId = null;
  async function fetchMessages(forceFull=false){
    try {
      const url = lastMessageId && !forceFull ? `/api/chat/${inboxID}/messages?sinceId=${lastMessageId}` : `/api/chat/${inboxID}/messages`;
      const res = await fetch(url);
      if(!res.ok) return;
      const data = await res.json();
      const newMessages = data.messages || [];
      if (newMessages.length === 0 && !forceFull) return; // nothing new
      let allMessages;
      if (forceFull || !lastMessageId) {
        allMessages = newMessages; // we requested full list
        messages.innerHTML='';
      } else {
        // append mode: we first need existing messages DOM? For simplicity refetch full when new messages exist
        allMessages = await (await fetch(`/api/chat/${inboxID}/messages`)).json();
        allMessages = allMessages.messages;
        messages.innerHTML='';
      }
      if (allMessages.length>0) {
        lastMessageId = allMessages[allMessages.length-1].MessageID;
        document.getElementById('latest'+inboxID).innerHTML = allMessages[allMessages.length-1].Message;
      }
      allMessages.forEach(chat => {
      if (userID==chat.SenderID) {
        if(isURL(chat.Message)){
          messages.innerHTML+=`<div class="area send">
            <div class="delete">
              <a onclick="deleteMessage(${chat.MessageID})">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                </svg>
              </a>
              <div id="popup${chat.MessageID}" class="popup">
                <div class="popup-content">
                  <p>Are you sure you want to delete this message?</p>
                  <button onclick="Delete(${chat.MessageID})">Yes</button>
                  <button onclick="Close(${chat.MessageID})">No</button>
                </div>
              </div>
            </div>
            <div class="area send bubble">
                <a href=${chat.Message} target="_blank">
                    <li class="url">${chat.Message}</li>
                </a>
            </div>
          </div>`;
        }
        else if(containsLongWord(chat.Message)){
          messages.innerHTML+=`<div class="area send">
            <div class="delete">
              <a onclick="deleteMessage(${chat.MessageID})">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                </svg>
              </a>
              <div id="popup${chat.MessageID}" class="popup">
                <div class="popup-content">
                  <p>Are you sure you want to delete this message?</p>
                  <button onclick="Delete(${chat.MessageID})">Yes</button>
                  <button onclick="Close(${chat.MessageID})">No</button>
                </div>
              </div>
            </div>
            <div class="area send bubble">
                  <li class="longWord">${chat.Message}</li>
            </div>
          </div>`;
        }
        else{
          // This should be the default case
          messages.innerHTML+=`<div class="area send">
            <div class="delete">
              <a onclick="deleteMessage(${chat.MessageID})">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                </svg>
              </a>
              <div id="popup${chat.MessageID}" class="popup">
                <div class="popup-content">
                  <p>Are you sure you want to delete this message?</p>
                  <button onclick="Delete(${chat.MessageID})">Yes</button>
                  <button onclick="Close(${chat.MessageID})">No</button>
                </div>
              </div>
            </div>
            <div class="area send bubble">
              <li >${chat.Message}</li>
            </div>
          </div>`;
        }
      }else {
        if (isURL(chat.Message)) {
          messages.innerHTML+=`<div class="area recep" >
            <div class="area recep bubble">
                <a href=${chat.Message} target="_blank">
                    <li class="url">${chat.Message}</li>
                </a>
            </div>
          </div>`;
        }
        else if (containsLongWord(chat.Message)) {
          messages.innerHTML+=`<div class="area recep" >
            <div class="area recep bubble">
              <li class="longWord">${chat.Message}</li>
            </div>
          </div>`;
        }

        else {
          messages.innerHTML+=`<div class="area recep" >
            <div class="area recep bubble">
              <li >${chat.Message}</li>
            </div>
          </div>`;
        }

      }
      // Scroll to bottom after each render
      const chatDisplay = document.querySelector('.chat_display');
      chatDisplay.scrollTop = chatDisplay.scrollHeight;
    });
    } catch(e){ console.error('Fetch messages failed', e); }
  }

  // Initial full load
  fetchMessages(true);
  // Poll every 3 seconds
  setInterval(fetchMessages, 3000);
  // Utility: sanitize html
  function escapeHtml(str){
    return str.replace(/[&<>"']/g, c => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]));
  }
  function classifyMessage(msg){
    if(isURL(msg)) return 'url';
    if(containsLongWord(msg)) return 'longWord';
    return 'individualMessage';
  }
  function appendOptimistic(tempId, text){
    const cls = classifyMessage(text);
    let content;
    if(cls==='url') {
      content = `<a href="${escapeHtml(text)}" target="_blank"><li class="url">${escapeHtml(text)}</li></a>`;
    } else if(cls==='longWord') {
      content = `<li class="longWord">${escapeHtml(text)}</li>`;
    } else {
      content = `<li class="individualMessage">${escapeHtml(text)}</li>`;
    }
    messages.innerHTML += `<div class="area send pending" id="${tempId}"><div class="area send bubble">${content}</div></div>`;
    const chatDisplay = document.querySelector('.chat_display');
    chatDisplay.scrollTop = chatDisplay.scrollHeight;
  }
  function markFailed(tempId){
    const el = document.getElementById(tempId);
    if(el){
      el.classList.remove('pending');
      el.classList.add('failed');
    }
  }
  let closeButton = document.getElementById('closeButton');
  closeButton.addEventListener('click', () => {
    window.location.href = '/';
  });
</script>
</body>
</html>